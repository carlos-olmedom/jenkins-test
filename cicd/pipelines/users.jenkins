import hudson.security.*
import jenkins.model.*
import hudson.tasks.Mailer
import com.michelin.cio.hudson.plugins.rolestrategy.*
import org.yaml.snakeyaml.Yaml

def label = "k8s-${UUID.randomUUID().toString()}"

podTemplate(label: 'my-pod-template2', containers: [
    containerTemplate(name: 'alpine', image: 'alpine:3.11', command: 'cat', ttyEnabled: true)
]) {
    node('my-pod-template2') {
        stage('Checkout Code') {
            // Checkout the repository where your users.yaml file is located
            checkout scm
        }
        stage('Run on Alpine') {
            container('alpine') {
                sh 'echo "Running User and Role Creation!"'

                // Load the user and role data from YAML
                def data = readYaml file: 'cicd/users/users.yaml'

                // Access the users and roles
                def users = data.users
                def roles = data.roles

                // Get Jenkins instance and the current Authorization Strategy
                def instance = Jenkins.get()
                def authStrategy = instance.getAuthorizationStrategy()

                // Preserve existing Role-Based Authorization Strategy if present
                if (!(authStrategy instanceof RoleBasedAuthorizationStrategy)) {
                    // Set Role-Based Authorization Strategy if it's not already set
                    authStrategy = new RoleBasedAuthorizationStrategy()
                    instance.setAuthorizationStrategy(authStrategy)
                } else {
                    echo "Preserving existing Role-Based Authorization Strategy"
                }

                // Get the existing global role map (so we don't overwrite existing roles)
                def globalRoleMap = authStrategy.getRoleMap(RoleBasedAuthorizationStrategy.GLOBAL)

                // Create or update roles
                roles.each { roleName, roleInfo ->
                    def permissions = roleInfo.permissions.collect { Permission.fromId(it) }

                    // If role exists, update its permissions; otherwise, create a new role
                    def existingRole = globalRoleMap.getRole(roleName)
                    if (existingRole) {
                        echo "Updating existing role '${roleName}'"
                        globalRoleMap.addRole(new Role(roleName, permissions)) // Update role with new permissions
                    } else {
                        echo "Creating new role '${roleName}' with permissions."
                        def role = new Role(roleName, permissions)
                        globalRoleMap.addRole(role)
                    }
                }

                // Ensure Jenkins Operator retains necessary permissions
                def operatorServiceAccount = "jenkins-operator" // replace with actual service account if different
                def operatorRole = new Role("jenkins-operator-role", [
                    Permission.fromId("Overall/Administer"),
                    Permission.fromId("Overall/Read")
                ])
                globalRoleMap.addRole(operatorRole)
                globalRoleMap.assignRole(operatorRole, operatorServiceAccount)
                echo "Assigned Overall/Administer and Overall/Read to Jenkins Operator."

                // Iterate over each user and create or update them in Jenkins
                users.each { userInfo ->
                    def username = userInfo.username
                    def password = userInfo.password
                    def fullName = userInfo.fullName
                    def email = userInfo.email
                    def role = userInfo.role

                    echo "Creating or updating user: ${username}, Full name: ${fullName}, Email: ${email}, Role: ${role}"

                    // Create or update the user in Jenkins
                    def user = User.getById(username, true)
                    user.setFullName(fullName)
                    user.addProperty(new Mailer.UserProperty(email))

                    def passwordProperty = HudsonPrivateSecurityRealm.Details.fromPlainPassword(password)
                    user.addProperty(passwordProperty)

                    user.save()

                    // Assign the user to the role
                    def userRole = globalRoleMap.getRole(role)
                    if (userRole) {
                        globalRoleMap.assignRole(userRole, username)
                        echo "Assigned role '${role}' to user '${username}'."
                    } else {
                        echo "Role '${role}' not found for user '${username}'."
                    }
                }

                // Save Jenkins instance after making changes
                instance.save()
            }
        }
    }
}
